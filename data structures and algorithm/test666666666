#BST
class Node:
    def __init__(self,data):
        self.data=data
        self.leftson=None
        self.rightson=None
class Tree:
    def __init__(self):
        self.root=None
    def insertroot(self,data):
        newNode=Node(data)
        if self.root is None:
            self.root=newNode
        else:
            temp=self.root
            while temp is not None:
                previous=temp
                if data<temp.data:
                    temp=temp.leftson
                else:
                    temp=temp.rightson
            if data<previous.data:
                previous.leftson=newNode
            else:
                previous.rightson=newNode
                
#Inorder - Left>Root>Right
    def inorder(self,root):
        if root.leftson is not None:
            self.inorder(root.leftson)
        print(root.data)
    
        if root.rightson is not None:
            self.inorder(root.rightson)
        
#Preorder - Root>left>Right
    def preorder(self,root):
        print(root.data)
        
        if root.leftson is not None:
            self.preorder(root.leftson)
            
        if root.rightson is not None:
            self.preorder(root.rightson)
            
#Postorder - Left>Right>Root
    def postorder(self,root):
        if root.leftson is not None:
            self.postorder(root.leftson)
            
        if root.rightson is not None:
            self.postorder(root.rightson)
            
        print(root.data)
        

'''Call'''
o=Tree()
a = int(input("Number of inputs: "))
for g in range(0,a):
    o.insertroot(int(input("Node.data: ")))
print("Inorder.")
o.inorder(o.root)
print("Preorder")
o.preorder(o.root)
print("Postorder")
o.postorder(o.root)
print("END!")